{"version":3,"sources":["webpack:///./node_modules/shortid/lib/index.js","webpack:///./node_modules/shortid/lib/random/random-byte-browser.js","webpack:///./src/views/Mod1.vue","webpack:///./src/views/Mod1.vue?14a8","webpack:///./src/views/Mod1.vue?014e","webpack:///./node_modules/shortid/lib/build.js","webpack:///./node_modules/shortid/lib/alphabet.js","webpack:///./node_modules/shortid/node_modules/nanoid/format.browser.js","webpack:///./node_modules/shortid/lib/random/random-from-seed.js","webpack:///./node_modules/shortid/index.js","webpack:///./node_modules/shortid/lib/util/cluster-worker-id-browser.js","webpack:///./node_modules/shortid/lib/generate.js","webpack:///./node_modules/shortid/lib/is-valid.js"],"names":["alphabet","build","isValid","clusterWorkerId","seed","seedValue","module","exports","worker","workerId","characters","newCharacters","undefined","shuffled","generate","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","push","Math","floor","random","class","createOrder","state","inputNain","type","placeholder","inputUserNain","inputdata","adding","toast","name","components","datakey","db","error","username","data","time","Date","toString","router","params","userId","render","counter","previousSeconds","REDUCE_TIME","version","str","seconds","now","previousSeed","randomFromSeed","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","setSeed","shuffle","characterIndex","sourceArray","targetArray","r","nextValue","splice","getShuffled","lookup","index","alphabetShuffled","get","mask","log","LN2","step","id","getNextValue","_seed_","format","number","done","loopCounter","pow","isShortId","nonAlphabetic","RegExp","replace","test"],"mappings":"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","file":"js/chunk-4824f1f2.de72846a.js","sourcesContent":["'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","<template>\r\n  <div class=\"frame\">\r\n    <div class=\"frame__header u-text-center\">\r\n        <div>\r\n            <div class=\"frame__title\"><h1>創建訂單</h1></div>\r\n            <div class=\"frame__subtitle\">開始你的第一步</div>\r\n        </div>\r\n        <div class=\"row\"><a class=\"col\" href=\"#\"><i class=\"fa fa-wrapper fa-facebook link-btn\" aria-hidden=\"true\"></i></a><a class=\"col\" href=\"#\"><i class=\"fa fa-wrapper fa-twitter link-btn\" aria-hidden=\"true\"></i></a><a class=\"col\" href=\"#\"><i class=\"fa fa-wrapper fa-instagram link-btn\" aria-hidden=\"true\"></i></a><a class=\"col\" href=\"#\"><i class=\"fa fa-wrapper fa-medium link-btn\" aria-hidden=\"true\"></i></a></div>\r\n    </div>\r\n    <div class=\"content-no-padding\">\r\n        <div class=\"divider m-0\"></div>\r\n    </div>\r\n    <div class=\"frame__body\">\r\n        <div class=\"content u-text-center\">\r\n            <div class=\"row level\">\r\n                <div class=\"col-xs-3 level-item\">\r\n                    <p class=\"m-0\">訂單名稱:</p>\r\n                </div>\r\n                <div class=\"col-xs-9 level-item\"><input @blur=\"createOrder\" v-model=\"state.inputNain\" type=\"name\" placeholder=\"edit me\"></div>    \r\n            </div>\r\n            <div   class=\"row level\">\r\n                <div class=\"col-xs-3 level-item\">\r\n                    <p class=\"m-0\">你的暱稱:</p>\r\n                </div>\r\n                <div class=\"col-xs-9 level-item\"><input  v-model=\"state.inputUserNain\" type=\"name\" ></div>\r\n            </div>\r\n            <div class=\"mb-1\">\r\n                <label class=\"font-bold\">說明:</label>\r\n                <textarea v-model=\"state.inputdata\" placeholder=\"請在此處填入對此菜單的說明及注意事項\"></textarea>\r\n            </div>\r\n            <div @click=\"adding\" v-if=\"state.inputNain &&state.inputUserNain\" class=\"btn-success btn\"><h6>創建</h6></div>\r\n        </div>\r\n    </div>\r\n    <div class=\"content-no-padding\">\r\n        <div class=\"divider m-0\"></div>\r\n    </div>\r\n    <div class=\"frame__footer\">\r\n        <div class=\"frame__subtitle u-text-center\"><i>這是一個開發中的頁面</i></div>\r\n    </div>\r\n</div>\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport dbs from '../db'\r\nimport { defineComponent,reactive } from 'vue';\r\nimport { useToast } from \"vue-toastification\";\r\nimport { getDatabase,set,ref} from \"firebase/database\";\r\nimport shortid from \"shortid\"\r\nimport router from '../router';\r\nconst toast = useToast()\r\nexport default defineComponent({\r\n  name: 'Mod1',\r\n  components: {\r\n  },\r\n  setup(){\r\n      const datakey=shortid.generate()\r\n        const db = getDatabase(dbs);\r\n        const state = reactive({\r\n            inputNain: \"\",\r\n            inputUserNain:\"\",\r\n            inputdata:\"\"\r\n        })\r\n        const createOrder = (): void => {\r\n            // 訂單名不得為空\r\n            if(state.inputNain === ''){\r\n                toast.error('請輸入訂單名稱')\r\n                return\r\n            }\r\n        }\r\n        const adding = (): void =>{\r\n            set(ref(db, 'users/' +datakey+'/datas'), {\r\n                username: state.inputUserNain,\r\n                data:  state.inputdata,\r\n                name:state.inputNain,\r\n                time:(new Date()).toString()\r\n            });\r\n            toast('創建成功')\r\n            router.push({ name: 'user', params: { userId:datakey } })\r\n        }\r\n        return{\r\n            state,\r\n            createOrder,\r\n            adding\r\n        }\r\n        \r\n  }\r\n\r\n});\r\n\r\n\r\n\r\n\r\n</script>\r\n","\r\nimport dbs from '../db'\r\nimport { defineComponent,reactive } from 'vue';\r\nimport { useToast } from \"vue-toastification\";\r\nimport { getDatabase,set,ref} from \"firebase/database\";\r\nimport shortid from \"shortid\"\r\nimport router from '../router';\r\nconst toast = useToast()\r\nexport default defineComponent({\r\n  name: 'Mod1',\r\n  components: {\r\n  },\r\n  setup(){\r\n      const datakey=shortid.generate()\r\n        const db = getDatabase(dbs);\r\n        const state = reactive({\r\n            inputNain: \"\",\r\n            inputUserNain:\"\",\r\n            inputdata:\"\"\r\n        })\r\n        const createOrder = (): void => {\r\n            // 訂單名不得為空\r\n            if(state.inputNain === ''){\r\n                toast.error('請輸入訂單名稱')\r\n                return\r\n            }\r\n        }\r\n        const adding = (): void =>{\r\n            set(ref(db, 'users/' +datakey+'/datas'), {\r\n                username: state.inputUserNain,\r\n                data:  state.inputdata,\r\n                name:state.inputNain,\r\n                time:(new Date()).toString()\r\n            });\r\n            toast('創建成功')\r\n            router.push({ name: 'user', params: { userId:datakey } })\r\n        }\r\n        return{\r\n            state,\r\n            createOrder,\r\n            adding\r\n        }\r\n        \r\n  }\r\n\r\n});\r\n\r\n\r\n\r\n\r\n","import { render } from \"./Mod1.vue?vue&type=template&id=ec12814e\"\nimport script from \"./Mod1.vue?vue&type=script&lang=ts\"\nexport * from \"./Mod1.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nmodule.exports = 0;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n"],"sourceRoot":""}